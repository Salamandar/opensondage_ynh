#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_print_info "Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
admin=$(ynh_app_setting_get $app admin)
is_public=$(ynh_app_setting_get $app is_public)
final_path=$(ynh_app_setting_get $app final_path)
language=$(ynh_app_setting_get $app language)
db_name=$(ynh_app_setting_get $app db_name)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_print_info "Ensuring downward compatibility..."

if [ -z "$is_public" ];
then
	is_public=$(ynh_app_setting_get $app public_site)
	ynh_app_setting_set $app is_public $is_public
	ynh_app_setting_delete $app public_site
fi

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set $app is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set $app is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z $db_name ]; then
	db_name=$(ynh_sanitize_dbid $app)
	ynh_app_setting_set $app db_name $db_name
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set $app final_path $final_path
fi

# Make sure default language is set
if [ -z "$language" ]
then
    language=$(grep LANGUE "/var/www/$app/variables.php" | grep -Po "'.*?'" | cut -d"'" -f2)
fi

# Use path instead of path_url in settings.yml...
if [ -z "$path_url" ]
then
	path_url=$(ynh_app_setting_get $app path_url)
	ynh_app_setting_set $app path $path_url
	ynh_app_setting_delete $app path_url
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_print_info "Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path $path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Upgrading source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info "Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info "Upgrading dependencies..."

ynh_install_app_dependencies php-fpdf php-cli

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info "Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create $app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPGRADE CONFIG.PHP
#=================================================
ynh_print_info "Reconfiguring opensondage..."

config="$final_path/app/inc/config.php"

# Verify the checksum and backup the file if it's different
ynh_backup_if_checksum_is_different "$config"

admin_mail=$(ynh_user_get_info $admin mail)

cp ../conf/config.php "$config"

# Change variables in configuration
ynh_replace_string "__DBUSER__"    $db_name   "$config"
db_pwd=$(ynh_app_setting_get $app mysqlpwd)
ynh_replace_string "__DBPWD__"     $db_pwd   "$config"
ynh_replace_string "__DBNAME__"    $db_name   "$config"
ynh_replace_string "__ADMINMAIL__" $admin_mail "$config"
ynh_replace_string "__LANGUAGE__"  $language "$config"
ynh_replace_string "__DOMAIN__"    $domain   "$config"
ynh_replace_string "__PATH__"      $path_url "$config"

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$config"

#=================================================
# REPLACE LOGO IMAGE (DEFAULT IS FRAMADATE)
#=================================================

cp ../img/logo.png "$final_path/images"

#=================================================
# CREATE LOG FILE
#=================================================

touch "$final_path/admin/stdout.log"

#=================================================
# RUN DATABASE UPGRADE
#=================================================
ynh_print_info "Upgrading database..."

# Set permissions for initilization
chown -R $app: "$final_path"

# Install composer
curl -sS https://getcomposer.org/installer \
	| COMPOSER_HOME="$final_path/.composer" \
	php -- --quiet --install-dir="$final_path" \
	|| ynh_die "Unable to install Composer"

# Update dependencies to create composer.lock
exec_as $app COMPOSER_HOME="$final_path/.composer" \
	php "$final_path/composer.phar" install --no-dev \
	-d "$final_path" --quiet --no-interaction \
	|| ynh_die "Unable to update core dependencies with Composer"

ynh_exec_warn_less exec_as $app php "$final_path/admin/migration.php"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown -R root: "$final_path"
chown -R $app: "$final_path/"{tpl_c,admin/stdout.log}

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info "Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	ynh_app_setting_set $app skipped_uris "/"
	# Keep /admin private
	ynh_app_setting_set $app protected_uris "/admin"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info "Reloading nginx web server..."

systemctl reload nginx

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Upgrade of $app completed"
